#include <iostream>
class MotorizedVehicle {public:void throttle() {std::cout << "speeds up" << std::endl;}virtual void brake() {std::cout << "slows down" << std::endl;}virtual void refuel() {std::cout << "refuels" << std::endl;}virtual void display() {std::cout << "MotorizedVehicle" << std::endl;}};class GasPowered : public MotorizedVehicle {public:void display() {std::cout << "GasPowered" << std::endl;}};class Hybrid : public MotorizedVehicle {public:void display() {std::cout << "Hybrid" << std::endl;}void brake() {std::cout << "slows down as battery charges" << std::endl;}};class Electric : public MotorizedVehicle {public:void display() {std::cout << "Electric" << std::endl;}void brake() {std::cout << "slows down as battery charges" << std::endl;}void refuel() {std::cout << "charging" << std::endl;}};class Shape3D {protected:float width;float height;float length;public:float getWidth() {return this->width;}float getHeight() {return this->height;}float getLength() {return this->length;}void setWidth(float w) {this->width = w;}void setHeight(float h) {this->height = h;}void setLength(float l) {this->length = l;}virtual float getVolume() = 0;};class Sphere : public Shape3D {public:float getVolume() override {return (4/3)*(3.14159)*(this->width/2)*(this->width/2)*(this->width/2);}};class Cube : public Shape3D {public:float getVolume() override {return (this->width)*(this->width)*(this->width);}};class RectPrism : public Shape3D {public:float getVolume() override {return (this->width)*(this->height)*(this->length);}};int main() {MotorizedVehicle* mv = new Electric();mv->display();mv->brake();mv->refuel();mv->throttle();delete mv;Sphere* s = new Sphere();s->setWidth(2);std::cout << s->getVolume() << std::endl;return 0;}